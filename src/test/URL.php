<?php


namespace NovemBit\i18n\test;


use NovemBit\i18n\system\Component;

/**
 * @property  Test context
 */
class URL extends Component
{

    private $urls
        = [
            'hello/bye',
            'https://wp.me/',
            'https://wp.me/wp-admin/post.php?post=1&action=edit',
            '/tests/i18n/tests/url.php/text-1',
            '/i18n/tests/url.php/text-1',
            '/letter-sequence.php',
            "https://wordpress.org/",
            "https://wordpress.org",
            "https://wp.me/wp-admin/",
            "https://wp.me/wp-admin/asd/asda",
            "https://wp.me/sample-page/",
            'https://wp.me/i18n/tests/url.php/text-1',
            'https://wp.me/alala/i18n/tests/url.php/text-1',
            'help/bro/#asd',
            '/#',
            '/#test',
            '#test',
            '/test/test2/test4/test6?test=123123',
            '/bare/hajox',
            'hello/bye',
            'tests/i18n/tests/url.php/test/test1/tqw3'
        ];

    /**
     * @param       $log
     * @param array $class
     * @param       $return
     *
     * @return mixed|string|null
     */
    public function log($log, $class = [], $return = false)
    {
        return $this->context->log($log, $class, $return);
    }

    private function test()
    {
        $log         = '';
        $translation = $this->context->context->translation;

        $result = $translation->setLanguages(['fr', 'de'])->url->translate(
            $this->urls
        );

        foreach ($result as $source => $value) {
            $log .= $this->log(implode('',
                [
                    $source,
                    $this->log($value, ['code'], true)
                ]
            ), ['code'], true);
        }

        return $log;
    }

    public function start()
    {

        $this->log(self::class . ' Testing' . $this->test(), ['code']);


        parent::init(); // TODO: Change the autogenerated stub

    }
}