<?php

/**
 * Languages component
 * php version 7.2.10
 *
 * @category Component
 * @package  Component
 * @author   Aaron Yordanyan <aaron.yor@gmail.com>
 * @license  https://www.gnu.org/licenses/gpl-3.0.txt GNU/GPLv3
 * @version  GIT: @1.0.1@
 * @link     https://github.com/NovemBit/i18n
 */

namespace NovemBit\i18n\component\localization;

use NovemBit\i18n\component\localization\countries\Countries;
use NovemBit\i18n\component\localization\exceptions\LanguageException;
use NovemBit\i18n\component\localization\languages\Languages;
use NovemBit\i18n\component\localization\regions\Regions;
use NovemBit\i18n\Module;
use NovemBit\i18n\system\Component;
use NovemBit\i18n\system\exception\Exception;
use NovemBit\i18n\system\helpers\Arrays;

/**
 * @property Module $context
 * @property Languages $languages
 * @property Countries $countries
 * @property Regions $regions
 * */
class Localization extends Component implements interfaces\Localization
{
    /**
     * Default language
     *
     * @var array[string][string]
     * */
    public $localization_config = [];

    /**
     * @var array
     * */
    public $global_domains = [];

    /**
     * @throws Exception
     */
    public function commonInit(): void
    {
        if (empty($this->global_domains)) {
            throw new Exception('Global domain field is required for "Localization" component.');
        }
        parent::commonLateInit(); // TODO: Change the autogenerated stub
    }

    /**
     * @return array
     */
    public static function defaultConfig(): array
    {
        return [
            'languages' => ['class' => Languages::class],
            'countries' => ['class' => Countries::class],
            'regions' => ['class' => Regions::class],
        ];
    }

    /**
     * {@inheritDoc}
     *
     * @param string|null $base_domain Base domain
     *
     * @return array
     */
    public function getConfig(?string $base_domain = null, ?string $value = null): array
    {
        $config = [];

        foreach ($this->localization_config as $domain_pattern => $_config) {
            if (preg_match("/$domain_pattern/", $base_domain)) {
                $config = $_config;
                break;
            }
        }

        if (!isset($config) && isset($this->localization_config['default'])) {
            $config = $this->localization_config['default'];
            $config['is_default'] = true;
        }

        if ($value !== null) {
            return $config[$value] ?? null;
        }

        return $config;
    }


    /**
     * @param string|null $base_domain
     * @param bool $assoc
     * @return array
     * @throws exceptions\LanguageException
     */
    public function getActiveLanguages(string $base_domain = null, bool $assoc = false): array
    {
        $base_languages = $this->countries->getActiveLanguages($base_domain);
        $base_languages = $base_languages ?? $this->regions->getActiveLanguages($base_domain) ?? [];

        if (!$assoc) {
            return $base_languages;
        }

        $result = array_flip($base_languages);

        foreach ($result as $key => &$language) {
            $language = $this->languages->getLanguageData($key);
        }

        return $result;
    }

    /**
     * {@inheritDoc}
     *
     * @param bool $assoc include whole data
     *
     * @return array|null
     * @throws LanguageException
     */
    public function getAcceptLanguages(
        ?string $base_domain = null,
        bool $assoc = false
    ): array {
        $config = $this->languages->getLocalizationConfig($base_domain);

        if (
            isset($config['accept_languages'])
            && !empty($config['accept_languages'])
        ) {
            $accept_languages = $config['accept_languages'];
        } else {
            $accept_languages = $this->languages->accept_languages;
        }

        if (!$assoc) {
            return $accept_languages;
        }

        $result = array_flip($accept_languages);

        foreach ($result as $key => &$language) {
            $language = $this->languages->getLanguageData($key);
        }

        return $result;
    }

    /**
     * @param string $language
     * @return string|null
     */
    public function getActiveDomain(string $language): ?string
    {
        $domain = $this->countries->getByPrimary($language, 'languages', 'domain');
        $domain = $domain ?: $this->regions->getByPrimary($language, 'languages', 'domain');
        return $domain;
    }

    public function isGlobalDomain(string $domain): bool
    {
        return in_array($domain, $this->getGlobalDomains());
    }

    /**
     * @return mixed
     */
    public function getGlobalDomains(): array
    {
        return $this->global_domains;
    }
}
