<?php
/**
 * Main i18n module
 * php version 7.2.10
 *
 * @category Component
 * @package  Composer
 * @author   Aaron Yordanyan <aaron.yor@gmail.com>
 * @license  https://www.gnu.org/licenses/gpl-3.0.txt GNU/GPLv3
 * @version  GIT: @1.0.1@
 * @link     https://github.com/NovemBit/i18n
 */

namespace NovemBit\i18n;

use Exception;

/**
 * Module class
 *
 * @category Class
 * @package  Module
 * @author   Aaron Yordanyan <aaron.yor@gmail.com>
 * @license  https://www.gnu.org/licenses/gpl-3.0.txt GNU/GPLv3
 * @link     https://github.com/NovemBit/i18n
 *
 * @property component\Translation translation
 * @property component\Languages languages
 * @property component\Request request
 * @property system\component\DB db
 * @property component\Rest rest
 * @property Module _instance Main instance of Module
 * @property string $prefix Global prefix for any public actions
 */
class Module extends system\Component
{
    private static $_instance;

    public $prefix = 'i18n';

    /**
     * {@inheritdoc}
     *
     * Load Yii framework container to use some libraries that not
     * Allowed to use standalone
     *
     * @return void
     */
    public function commonInit()
    {

        /*
         * Check if yii framework not initialized
         * */
        if (!class_exists("Yii")) {
            defined('YII_DEBUG') or define('YII_DEBUG', false);
            defined('YII_ENV') or define('YII_ENV', 'prod');
            include __DIR__ . '/../../../yiisoft/yii2/Yii.php';
        }
        parent::commonInit(); // TODO: Change the autogenerated stub
    }

    /**
     * Start request translation
     *
     * @throws Exception
     *
     * @return void
     */
    public function start()
    {
        $this->rest->start();
        $this->request->start();
    }

    /**
     * Creating module main instance
     *
     * @param null|array $config Main configuration array
     *
     * @return Module
     */
    public static function instance($config = null)
    {

        if (!isset(self::$_instance) && ($config != null)) {
            self::$_instance = new self($config);
        }

        return self::$_instance;
    }

}
